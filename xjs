#!/usr/bin/env python3


import json
import sys
from application import Application
import click
from controller import Controller
from machine import Machine
from model import Model
from prettytable import PrettyTable
import yaml


COLOR_GREEN = "\033[32m"
COLOR_ORANGE = "\u001b[31;1m"
COLOR_RED = "\033[31m"
COLOR_RESET = "\u001b[0m"
COLOR_YELLOW = "\033[33m"
UPDATE_THRESHOLD = 300

juju_status = {}
controllers = []


def load_status_file(inputfile):
    """Load a juju status file, inputfile is a yaml or json file"""
    rawstatus = {}

    try:
        rawstatus = json.loads(inputfile)
    except Exception:
        try:
            rawstatus = yaml.safe_load(inputfile)
        except Exception:
            print(COLOR_RED + "Error trying to load status file" + COLOR_RESET)
            sys.exit(1)

    if "controller" in rawstatus:
        controller = Controller(rawstatus["controller"])
    else:
        controller = Controller()
    controllers.append(controller)
    model = Model(rawstatus["model"], controller)
    controller.add_model(model)
    for machname, machinfo in rawstatus["machines"].items():
        machine = Machine(machname, machinfo, model)
        model.add_machine(machine)
    for appname, appinfo in rawstatus["applications"].items():
        application = Application(appname, appinfo, model)
        model.add_application(application)


def console_print_model_info(color=True):
    """Filter and sort model info to print in a table here"""
    # TODO Handle Sort
    # TODO Handle Filter
    # TODO Handle Optional Color Print
    for controller in controllers:
        console_print_object(print_what=controller.models, color=color)


def console_print_application_info(color=True):
    """Filter and sort application info to print in a table here"""
    # TODO Handle Sort
    # TODO Handle Filter
    # TODO Handle Optional Color Print
    for controller in controllers:
        for model in controller.models:
            console_print_object(print_what=model.applications, color=color)


def console_print_unit_info(color=True):
    """Filter and sort unit info to print in a table here"""
    # TODO Handle Sort
    # TODO Handle Filter
    # TODO Handle Optional Color Print
    # TODO Handle If Subordinates
    units = []
    for controller in controllers:
        for model in controller.models:
            for application in model.applications:
                for unit in application.units:
                    units.append(unit)
                    for subunit in unit.subordinates:
                        units.append(subunit)
    console_print_object(print_what=units, color=color)


def console_print_networkinterface_info(color=True):
    """Filter and sort network info to print in a table here"""
    # TODO Handle Sort
    # TODO Handle Filter
    # TODO Handle Optional Color Print
    nics = []
    for controller in controllers:
        for model in controller.models:
            for machine in model.machines:
                for nic in machine.networkinterfaces:
                    nics.append(nic)
                for container in machine.containers:
                    for nic in container.networkinterfaces:
                        nics.append(nic)
    console_print_object(print_what=nics, color=color)


def console_print_machine_info(color=True):
    """Filter and sort machine info to print in a table here"""
    # TODO Handle Sort
    # TODO Handle Filter
    # TODO Handle Optional Color Print
    machines = []
    for controller in controllers:
        for model in controller.models:
            for machine in model.machines:
                machines.append(machine)
                for container in machine.containers:
                    machines.append(container)
    console_print_object(print_what=machines, color=color)


# Handle console colors here
def console_print_object(print_what, color=True):
    """Print a table formatted for the console"""
    table = PrettyTable()
    # table.set_style(12)
    table.field_names = print_what[0].column_names
    for row in print_what:
        table.add_row(row.get_row(color))
    table.align = "l"
    print(table)


@click.command()
@click.option(
    "--show-apps",
    "-a",
    default=False,
    is_flag=True,
    help="Show application information",
)
@click.option(
    "--include-containers",
    "-c",
    default=False,
    is_flag=True,
    help="Include Container information",
)
@click.option(
    "--show-model",
    "-d",
    default=False,
    is_flag=True,
    help="Show model information",
)
@click.option(
    "--hide-scale-zero",
    "-h",
    default=False,
    is_flag=True,
    help="Hide applications with a scale of 0",
)
@click.option(
    "--show-machines",
    "-m",
    default=False,
    is_flag=True,
    help="Show machine information",
)
@click.option(
    "--show-net",
    "-n",
    default=False,
    is_flag=True,
    help="Show network interface information",
)
@click.option(
    "--hide-subordinate-units",
    "-s",
    default=False,
    is_flag=True,
    help="Hide subordinate units",
)
@click.option(
    "--show-units",
    "-u",
    default=False,
    is_flag=True,
    help="Show unit information",
)
@click.option(
    "--no-color",
    default=False,
    is_flag=True,
    help="Remove color from output",
)
@click.option(
    "--offline",
    default=False,
    is_flag=True,
    help="Don't query jujucharms.com for version information",
)
@click.argument("statusfiles", required=True, type=click.File("r"), nargs=-1)
def main(
    statusfiles,
    hide_scale_zero,
    hide_subordinate_units,
    show_apps,
    show_units,
    show_machines,
    show_net,
    show_model,
    include_containers,
    offline,
    no_color
):
    """
    xjs parses a juju status yaml/json and displays the information
    in a user friendly form highlighting specific fields of specific
    interest.
    """

    color = not no_color
    for statusfile in statusfiles:
        load_status_file(statusfile)

    # If no particular field was specified, show them all
    if (
        not show_apps
        and not show_units
        and not show_machines
        and not show_net
        and not show_model
        and not include_containers
    ):
        show_apps = True
        show_units = True
        show_machines = True
        show_net = True
        show_model = True
        include_containers = True

    if not offline:
        for controller in controllers:
            controller.update_app_version_info()

    if show_model:
        console_print_model_info(color)
        print("")
    if show_apps:
        # TODO Handle hide_scale_zero
        console_print_application_info(color)
        print("")
    if show_units:
        # TODO Handle hide_subordinate_units
        console_print_unit_info(color)
        print("")
    if show_machines:
        # TODO Handle include_containers
        console_print_machine_info(color)
        print("")
    if show_net:
        # TODO Handle include_containers
        console_print_networkinterface_info(color)
        print("")


if __name__ == "__main__":
    main()
